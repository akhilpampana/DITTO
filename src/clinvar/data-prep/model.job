#!/bin/bash
#
#SBATCH --job-name=Clinvar-prep
#SBATCH --output=Clinvar-prep.out
#SBATCH --error=Clinvar-prep.err
#
### Modify this according to your Ray workload.
#SBATCH --nodes=1
#SBATCH --exclusive
#
# Number of tasks needed for this job. Generally, used with MPI jobs
#SBATCH --tasks-per-node=1
#SBATCH --partition=pascalnodes
#
# Time format = HH:MM:SS, DD-HH:MM:SS
#SBATCH --time=11:59:58
#
### Modify this according to your Ray workload.
#SBATCH --cpus-per-task=5
#SBATCH --mem-per-cpu=1GB
### Similarly, you can also specify the number of GPUs per node.
### Modify this according to your Ray workload. Sometimes this
### should be 'gres' instead.
#SBATCH --gpus-per-task=1
#
# Send mail to the email address when the job fails
#SBATCH --mail-type=FAIL
#SBATCH --mail-user=tmamidi@uab.edu

#Set your environment here
module load Anaconda3/2020.02
#source activate testing
source activate training

# ===== DO NOT CHANGE THINGS HERE UNLESS YOU KNOW WHAT YOU ARE DOING =====
# This script is a modification to the implementation suggest by gregSchwartz18 here:
# https://github.com/ray-project/ray/issues/826#issuecomment-522116599
redis_password=$(uuidgen)
export redis_password

# Getting the node names
nodes=$(scontrol show hostnames "$SLURM_JOB_NODELIST")  # Getting the node names
nodes_array=($nodes)

head_node=${nodes_array[0]}
head_node_ip=$(srun --nodes=1 --ntasks=1 -w "$head_node" hostname --ip-address) # making redis-address

# if we detect a space character in the head node IP, we'll
# convert it to an ipv4 address. This step is optional.
if [[ "$head_node_ip" == *" "* ]]; then
IFS=' ' read -ra ADDR <<<"$head_node_ip"
if [[ ${#ADDR[0]} -gt 16 ]]; then
  head_node_ip=${ADDR[1]}
else
  head_node_ip=${ADDR[0]}
fi
echo "IPV6 address detected. We split the IPV4 address as $head_node_ip"
fi

port=6379
ip_head=$head_node_ip:$port
export ip_head
echo "IP Head: $ip_head"

echo "Starting HEAD at $head_node"
srun --nodes=1 --ntasks=1 -w "$head_node" \
    ray start --head --node-ip-address="$head_node_ip" --port=$port \
    --num-cpus "${SLURM_CPUS_PER_TASK}" --num-gpus "${SLURM_GPUS_PER_TASK}" --block &

# optional, though may be useful in certain versions of Ray < 1.0.
sleep 10

# number of nodes other than the head node
worker_num=$((SLURM_JOB_NUM_NODES - 1))

for ((i = 1; i <= worker_num; i++)); do
    node_i=${nodes_array[$i]}
    echo "Starting WORKER $i at $node_i"
    srun --nodes=1 --ntasks=1 -w "$node_i" \
        ray start --address "$ip_head" \
        --num-cpus "${SLURM_CPUS_PER_TASK}" --num-gpus "${SLURM_GPUS_PER_TASK}" --block &
    sleep 5
done


#Run your commands here
#wget -P /data/project/worthey_lab/projects/experimental_pipelines/tarun/ditto/data/external/ https://ftp.ncbi.nlm.nih.gov/pub/clinvar/vcf_GRCh37/clinvar.vcf.gz
#gunzip /data/project/worthey_lab/projects/experimental_pipelines/tarun/ditto/data/external/clinvar.vcf.gz
####vcffilter -f "DP > 10 & MQ > 30 & QD > 20" SL156674.vcf > filtered_SL156674.vcf
#python /data/project/worthey_lab/projects/experimental_pipelines/annovar_vcf_annotation/Annovar.py  /data/project/worthey_lab/projects/experimental_pipelines/tarun/ditto/data/external/clinvar.vcf /data/scratch/tmamidi/ /data/project/worthey_lab/projects/experimental_pipelines/tarun/ditto/data/interim/ /data/project/worthey_lab/tools/annovar/annovar_hg19_db
#until [ -f /data/project/worthey_lab/projects/experimental_pipelines/tarun/ditto/data/interim/clinvar.out.hg19_multianno.vcf ]
#do
#    sleep 600
#done
#echo "Annovar completed!"
#python /data/project/worthey_lab/projects/experimental_pipelines/tarun/ditto/src/clinvar/data-prep/parse_clinvar.py
python /data/project/worthey_lab/projects/experimental_pipelines/tarun/ditto/src/clinvar/data-prep/filter.py
exit
#python final.py
