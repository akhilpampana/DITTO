"""
Sets up VEP cache and plugins, and then uses them to annotate VCF
"""

from pathlib import Path

# datasets to use for annotations
configfile: "variant_annotation/configs/datasets.yaml"

EXTERNAL_DIR = Path("data/external")
# RAW_DIR = Path("data/raw")
# INTERIM_DIR = Path("data/interim")
PROCESSED_DIR = Path("data/processed")


INPUT_VCF = f"/data/project/worthey_lab/projects/CF_TLOAF_PFarrell/analysis/select_vars/cross_sample_vars.vcf.gz"

# VEP parameters
VEP_CACHE = 'homo_sapiens_refseq'
SPECIES = 'homo_sapiens'
REF_BUILD = "GRCh38"
ENSEMBL_DATASET_VERSION = "101"


# rule all:
#     input:
#         ANNOTATED_VCF,


rule get_vep_cache:
    output:
        cache = directory(EXTERNAL_DIR / "vep" / "cache" / VEP_CACHE),
    params:
        species = VEP_CACHE,
        build = REF_BUILD,
        release = ENSEMBL_DATASET_VERSION,
        plugins = "CADD"
    message:
        "Retrieves VEP cache data"
    # log:
    #     "logs/vep/cache.log"
    # wrapper:
    #     "0.59.2/bio/vep/cache"
    conda:
        "config/env/vep_bcftools.yaml"
    shell:
        r"""
        vep_install --AUTO cfp \
            --SPECIES {params.species} \
            --ASSEMBLY {params.build} \
            --PLUGINS {params.plugins} \
            --CACHE_VERSION {params.release} \
            --CACHEDIR {output.cache} \
            --CONVERT \
            --NO_UPDATE > {log}
        """


rule get_vep_plugins:
    output:
        directory(EXTERNAL_DIR / "vep" / "plugins"),
    message:
        "Downloads VEP plugins"
    params:
        release = ENSEMBL_DATASET_VERSION
    wrapper:
        "0.59.2/bio/vep/plugins"


rule annotate_variants:
    input:
        calls = INPUT_VCF,
        cache = EXTERNAL_DIR / "vep" / "cache" / VEP_CACHE,
        plugins = EXTERNAL_DIR / "vep" / "plugins",
        cadd_snv = config['CADD_SNV'],
        cadd_indel = config['CADD_INDEL'],
        gerp = config['GERP'],
        # gnomad_exomes = GNOMAD_EXOMES,
        gnomad_genomes = config['GNOMAD_GENOMES'],
        clinvar = config['CLINVAR'],
    output:
        calls = PROCESSED_DIR / "vep" / "annotated.vcf",
        stats = PROCESSED_DIR / "vep" / "stats.html"
    message:
        "Annotated vcf using VEP with CADD, gnomad-exomes, gnomad-genomes and GERP. "
        f"VEP cache used: {VEP_CACHE}, ref build: {REF_BUILD}, Ensemble version: {ENSEMBL_DATASET_VERSION}"
    params:
        release = ENSEMBL_DATASET_VERSION,
        species = SPECIES,
        build = REF_BUILD,
        refseq_flag = "--refseq" if 'refseq' in VEP_CACHE else "",
    # log:
    #     "logs/vep/annotate.log"
    threads: 4
    # wrapper:
    #     "0.64.0/bio/vep/annotate"
    conda:
        "config/env/vep_bcftools.yaml"
    shell:
        r"""
        (bcftools view {input.calls} | \
            vep --fork {threads} \
                --format vcf \
                --vcf \
                --cache \
                --cache_version {params.release} \
                --species {params.species} \
                {params.refseq_flag} \
                --assembly {params.build} \
                --hgvs \
                --dir_cache {input.cache} \
                --dir_plugins {input.plugins} \
                --plugin CADD,{input.cadd_snv},{input.cadd_indel}\
                --custom {input.gerp},GERP,bed \
                --custom {input.gnomad_genomes},gnomADv3,vcf,exact,0,AC,AN,AF \
                --custom {input.clinvar},clinvar,vcf,exact,0,ALLELEID,CLNSIG,CLNSIGCONF,GENEINFO \
                --output_file STDOUT \
                --stats_file {output.stats} | \
            bcftools view -Ov > {output.calls}) \
            &> {log}
        """


